{"version":3,"sources":["components/navigation/logo.jpg","components/navigation/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","to","src","logo","class","alt","href","title","App","fallback","exact","path","component","lazy","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,4KCyB5BC,EArBA,WACX,OACI,yBAAKC,UAAU,kCACX,yBAAKA,UAAU,QACf,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,oCACnB,yBAAKE,IAAKC,IAAMC,MAAM,mBAAmBC,IAAI,eAEjD,yBAAKL,UAAU,qCAAf,gBAAgE,6BAAhE,iBAIA,yBAAKA,UAAW,qBACZ,kBAAC,IAAD,CAAMC,GAAG,YAAYD,UAAW,6CAA6CM,KAAK,IAAIC,MAAM,IAA5F,8CACA,uBAAGP,UAAW,6CAA6CM,KAAK,IAAIC,MAAM,IAA1E,4GACA,uBAAGP,UAAW,6CAA6CM,KAAK,IAAIC,MAAM,IAA1E,8CACA,uBAAGP,UAAW,kCAAkCM,KAAK,IAAIC,MAAM,IAA/D,uDCGDC,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,6CAClB,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,gBAAK,kBAAM,kCAC5C,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,UAAUC,UAAWC,gBAAK,kBAAM,kCAClD,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,YAAYC,UAAWC,gBAAK,kBAAM,kCACpD,kBAAC,IAAD,CAAOF,KAAK,oBAAoBC,UAAWC,gBAAK,kBAAM,sCCF5CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4fddcc0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a60e4ff6.jpg\";","import React from 'react';\r\nimport logo from './logo.jpg';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NavBar = () => {\r\n    return(\r\n        <nav className=\"dt w-100 border-box pa3 ph5-ns\">\r\n            <div className=\"w-45\">\r\n            <Link to='/' className=\"dtc v-mid mid-gray link dim w-25\">\r\n                <img src={logo} class=\"dib w2 h2 br-100\" alt=\"Site Name\" />\r\n            </ Link>\r\n            <div className=\"dtc v-left mid-gray v-mid ml5 pl2\">097000 00 00 <br />097000 00 00</div>\r\n            </div>\r\n            \r\n            \r\n            <div className =\"dtc v-mid w-75 tr\">\r\n                <Link to='/projects' className =\"link dim dark-gray f6 f5-ns dib mr3 mr4-ns\" href=\"#\" title=\"\">Проєкти</Link>\r\n                <a className =\"link dim dark-gray f6 f5-ns dib mr3 mr4-ns\" href=\"#\" title=\"\">Послуги та розцінки</a>\r\n                <a className =\"link dim dark-gray f6 f5-ns dib mr3 mr4-ns\" href=\"#\" title=\"\">Відгуки</a>\r\n                <a className =\"link dim dark-gray f6 f5-ns dib\" href=\"#\" title=\"\">Контакти</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React, { lazy, Suspense } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport NavBar from './components/navigation/NavBar';\n// import Home from './containers/home/Home';\n\nfunction App() {\n  return (\n    <Router>\n      <Suspense fallback={<div>Loading... </div>}>\n        <NavBar />\n        <Switch>\n          <Route exact path=\"/\" component={lazy(() => import('./containers/home/Home'))} />\n          <Route exact path=\"/lizena\" component={lazy(() => import('./containers/home/Home'))} />\n          <Route exact path=\"/projects\" component={lazy(() => import('./containers/projects/Projects'))} />\n          <Route path=\"/projects/project\" component={lazy(() => import('./containers/projects/Project'))} />\n        </Switch>\n      </Suspense>\n      {/* <LoadingSpinner /> */}\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}